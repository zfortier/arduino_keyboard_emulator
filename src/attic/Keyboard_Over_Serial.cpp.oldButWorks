/* 
This version assumes line mode, where a buffer is passed from the terminal
program to arduino.


To Use as keyboard, flash with keyboard firmware:

a45e60e88017:Ardu z050789$ dfu-programmer atmega16u2 erase
Checking memory from 0x0 to 0x2FFF...  Not blank at 0x1.
Erasing flash...  Success
a45e60e88017:Ardu z050789$ dfu-programmer atmega16u2 flash kbd.hex 
Checking memory from 0x0 to 0xFFF...  Empty.
0%                            100%  Programming 0x1000 bytes...
[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]  Success
0%                            100%  Reading 0x3000 bytes...
[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]  Success
Validating...  Success
0x1000 bytes written into 0x3000 bytes memory (33.33%).
a45e60e88017:Ardu z050789$ dfu-programmer atmega16u2 reset



To download new programs, flash with arduino USB firmware
:
a45e60e88017:Ardu z050789$ dfu-programmer atmega16u2 erase
Checking memory from 0x0 to 0x2FFF...  Not blank at 0x1.
Erasing flash...  Success
a45e60e88017:Ardu z050789$ dfu-programmer atmega16u2 flash usb.hex 
Checking memory from 0x0 to 0xFFF...  Empty.
0%                            100%  Programming 0x1000 bytes...
[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]  Success
0%                            100%  Reading 0x3000 bytes...
[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]  Success
Validating...  Success
0x1000 bytes written into 0x3000 bytes memory (33.33%).
a45e60e88017:Ardu z050789$ dfu-programmer atmega16u2 reset

 */

#include <SoftwareSerial.h>
#include <Arduino.h>
void translateInput(char);
uint8_t kbdBfr[8] = { 0 };
uint8_t clearBfr[8] = { 0 };
SoftwareSerial Serial1(11,12);
bool enterFlag = 0;
uint64_t n = 0;
char inputChar;
void setup() 
{
  clearBfr[2] = 0x00;
  clearBfr[0] = 0x02;
  pinMode(13, OUTPUT);
  digitalWrite(13, LOW);
  Serial.begin(9600);
  while(!Serial);
  Serial1.begin(9600);
  while(!Serial1);
  kbdBfr[0] = 0;
  kbdBfr[2] = 0;
    for (n = 0; n < 100000; n++){
      digitalWrite(13, HIGH);
      enterFlag = 1;
    }
    enterFlag = 0;
    digitalWrite(13, LOW);
    Serial1.setTimeout(3000);
}

void loop() 
{
  while(Serial1.available() ) {
    inputChar = Serial1.read();
    for (n = 0; n < 1000; n++) {
     digitalWrite(13, HIGH);
    }
    Serial1.println(inputChar);
    if(inputChar == '`') {
      Serial1.println("\nConstruct custom packet...");
      Serial1.println( "\nEnter buffer[0] value: ");
      kbdBfr[0] = Serial1.parseInt();
      Serial1.println( "\nEnter buffer[1] value: ");
      kbdBfr[1] = Serial1.parseInt();
      Serial1.println( "\nEnter buffer[2] value: ");
      kbdBfr[2] = Serial1.parseInt();
      Serial1.println( "\nEnter buffer[3] value: ");
      kbdBfr[3] = Serial1.parseInt();
      Serial1.println( "\nSending: " );
      Serial1.print( kbdBfr[0] );
      Serial1.print( " ");
      Serial1.print( kbdBfr[1]);
      Serial1.print( " ");
      Serial1.print( kbdBfr[2]);
      Serial1.print( " " );
      Serial1.print( kbdBfr[3]);
//      print( "(");
//      print( _HEX(kbdBfr[0]));
//      print( ")" );
      Serial.write(kbdBfr, 8); //write input char
      kbdBfr[2] = 0x00; //relase key
      kbdBfr[0] = 0x02;
      Serial.write(kbdBfr, 8); //write release key
    }
      else {
      kbdBfr[0] = 0x00;
      kbdBfr[2] = 0x00;
      translateInput(inputChar); //set buffer to inputed character
      Serial.write(kbdBfr, 8); //write input char
      kbdBfr[2] = 0x00; //relase key
      kbdBfr[0] = 0x02;      Serial.write(clearBfr, 8); //write release key
//      enterFlag = 1;
    }
    digitalWrite(13, LOW);

//
//  if(enterFlag) {
//    digitalWrite(13, LOW);
//    kbdBfr[2] = 0x28; //enter
//    Serial.write(kbdBfr, 8);//write enter
//    kbdBfr[2] = 0; //release
//    Serial.write(kbdBfr, 8); //write release
//    enterFlag = 0;
//  }
  
  }
}



void translateInput(char inputVal) {
    
  switch(inputVal) {
    case 0x00:
      kbdBfr[0] = 0;
      kbdBfr[2] = 0x28;
      break;
    case 'a':
      kbdBfr[2] = 0x04;
      break; 
    case 'b':
      kbdBfr[2] = 0x05;
      break; 
    case 'c':
      kbdBfr[2] = 0x06;
      break; 
    case 'd':
      kbdBfr[2] = 0x07;
      break; 
    case 'e':
      kbdBfr[2] = 0x08;
      break; 
    case 'f':
      kbdBfr[2] = 0x09;
      break; 
    case 'g':
      kbdBfr[2] = 0x0A;
      break; 
    case 'h':
      kbdBfr[2] = 0x0B;
      break; 
    case 'i':
      kbdBfr[2] = 0x0C;
      break; 
    case 'j':
      kbdBfr[2] = 0x0D;
      break; 
    case 'k':
      kbdBfr[2] = 0x0E;
      break; 
    case 'l':
      kbdBfr[2] = 0x0F;
      break; 
    case 'm':
      kbdBfr[2] = 0x10;
      break; 
    case 'n':
      kbdBfr[2] = 0x11;
      break; 
    case 'o':
      kbdBfr[2] = 0x12;
      break; 
    case 'p':
      kbdBfr[2] = 0x13;
      break; 
    case 'q':
      kbdBfr[2] = 0x14;
      break; 
    case 'r':
      kbdBfr[2] = 0x15;
      break; 
    case 's':
      kbdBfr[2] = 0x16;
      break; 
    case 't':
      kbdBfr[2] = 0x17;
      break; 
    case 'u':
      kbdBfr[2] = 0x18;
      break; 
    case 'v':
      kbdBfr[2] = 0x19;
      break; 
    case 'w':
      kbdBfr[2] = 0x1A;
      break; 
    case 'x':
      kbdBfr[2] = 0x1B;
      break; 
    case 'y':
      kbdBfr[2] = 0x1C;
      break; 
    case 'z':
      kbdBfr[2] = 0x1D;
      break; 
    case 'A':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x04;
      break; 
    case 'B':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x05;
      break; 
    case 'C':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x06;
      break; 
    case 'D':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x07;
      break; 
    case 'E':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x08;
      break; 
    case 'F':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x09;
      break; 
    case 'G':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x0A;
      break; 
    case 'H':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x0B;
      break; 
    case 'I':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x0C;
      break; 
    case 'J':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x0D;
      break; 
    case 'K':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x0E;
      break; 
    case 'L':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x0F;
      break; 
    case 'M':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x10;
      break; 
    case 'N':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x11;
      break; 
    case 'O':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x12;
      break; 
    case 'P':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x13;
      break; 
    case 'Q':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x14;
      break; 
    case 'R':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x15;
      break; 
    case 'S':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x16;
      break; 
    case 'T':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x17;
      break; 
    case 'U':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x18;
      break; 
    case 'V':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x19;
      break; 
    case 'W':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x1A;
      break; 
    case 'X':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x1B;
      break; 
    case 'Y':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x1C;
      break; 
    case 'Z':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x1D;
      break; 
    case '1': 
      kbdBfr[2] = 0x1E;
      break;
    case '!':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x1E;
      break;
    case '2':
      kbdBfr[2] = 0x1F;
      break;
    case '@':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x1F;
      break;
    case '3': 
      kbdBfr[2] = 0x20;
      break;
    case '#':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x20;
      break;
    case '4':
      kbdBfr[2] = 0x21;
      break;
    case '$':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x21;
      break;
    case '5':
      kbdBfr[2] = 0x22;
      break;
    case '%':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x22;
      break;
    case '6':
      kbdBfr[2] = 0x23;
      break;
    case '^':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x23;
      break;
    case '7':
      kbdBfr[2] = 0x24;
      break;
    case '&':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x24;
      break;
    case '8':
      kbdBfr[2] = 0x25;
      break;
    case '*':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x25;
      break;
    case '9':
      kbdBfr[2] = 0x26;
      break;
    case '(':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x26;
      break;
    case '0':
      kbdBfr[2] = 0x27;
      break;
    case ')':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x27;
      break;
    case '\t':
      kbdBfr[2] = 0x2B;
      break; 
    case ' ':
      kbdBfr[2] = 0x2C;
      break; 
    case '-':
      kbdBfr[2] = 0x2D;
      break;
    case '_':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x2D;
      break; 
    case '=': 
      kbdBfr[2] = 0x2E;
      break;
     case '+':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x2E;
      break;
    case '[': 
      kbdBfr[2] = 0x2F;
      break;
    case '{':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x2F;
      break; 
    case ']': 
      kbdBfr[2] = 0x30;
      break;
    case '}':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x30;
      break; 
    case '\\': 
      kbdBfr[2] = 0x31;
      break;
    case '|':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x31;
      break; 
    case ';': 
      kbdBfr[2] = 0x33;
      break;
    case ':':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x33;
      break; 
    case '\'': 
      kbdBfr[2] = 0x34;
      break;
    case '\"':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x34;
      break; 
    case '`': 
      kbdBfr[2] = 0x35;
      break;
    case '~':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x35;
      break; 
    case ',': 
      kbdBfr[2] = 0x36;
      break;
    case '<':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x36;
      break; 
    case '.': 
      kbdBfr[2] = 0x37;
      break;
    case '>':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x37;
      break; 
    case '/': 
      kbdBfr[2] = 0x38;
      break;
    case '?':
      kbdBfr[0] = 0x02;
      kbdBfr[2] = 0x38;
      break; 
    default:
      kbdBfr[0] = 0x00;
      kbdBfr[2] = 0x00;
      break;
 /*
TBD:
Caps Lock 0x39 
ESCAPE 0x29 
DELETE (Backspace) 0x2A 
F1 0x3A 
F2 0x3B 
F3 0x3C 
F4 0x3D 
F5 0x3E 
F6 0x3F 
F7 0x40 
F8 0x41 
F9 0x42 
F10 0x43 
F11 0x44 
F12 0x45 
RightArrow 0x4F 
LeftArrow 0x50 
DownArrow 0x51 
UpArrow 0x52 
Locking Caps Lock 0x82 
LeftControl 0xE0 
LeftShift 0xE1 
LeftAlt 0xE2 
Left GUI (apple) 0xE3 
*/
  }
}


