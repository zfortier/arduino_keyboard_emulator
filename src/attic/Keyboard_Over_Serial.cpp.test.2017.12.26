#include <SoftwareSerial.h>
#include <Arduino.h>
SoftwareSerial Serial1(8, 9);
bool enterFlag = 0;

uint32_t n = 0;
uint8_t kbdBfr[8] = { 0 };
void setup();
void loop();
void translateInput(char, char*);

int main(void) {
  setup();
  while(1){
    loop();
  }
  return 0;
}

void translateInput(char inputVal, char* outBuffer) {
  switch(inputVal) {
    case 'a':
      outBuffer[2] = 0x04;
      break;
    case 'b':
      outBuffer[2] = 0x05;
      break;
    case 'c':
      outBuffer[2] = 0x06;
      break;
    case 'd':
      outBuffer[2] = 0x07;
      break;
    case 'e':
      outBuffer[2] = 0x08;
      break;
    case 'f':
      outBuffer[2] = 0x09;
      break;
    case 'g':
      outBuffer[2] = 0x0A;
      break;
    case 'h':
      outBuffer[2] = 0x0B;
      break;
    case 'i':
      outBuffer[2] = 0x0C;
      break;
    case 'j':
      outBuffer[2] = 0x0D;
      break;
    case 'k':
      outBuffer[2] = 0x0E;
      break;
    case 'l':
      outBuffer[2] = 0x0F;
      break;
    case 'm':
      outBuffer[2] = 0x10;
      break;
    case 'n':
      outBuffer[2] = 0x11;
      break;
    case 'o':
      outBuffer[2] = 0x12;
      break;
    case 'p':
      outBuffer[2] = 0x13;
      break;
    case 'q':
      outBuffer[2] = 0x14;
      break;
    case 'r':
      outBuffer[2] = 0x15;
      break;
    case 's':
      outBuffer[2] = 0x16;
      break;
    case 't':
      outBuffer[2] = 0x17;
      break;
    case 'u':
      outBuffer[2] = 0x18;
      break;
    case 'v':
      outBuffer[2] = 0x19;
      break;
    case 'w':
      outBuffer[2] = 0x1A;
      break;
    case 'x':
      outBuffer[2] = 0x1B;
      break;
    case 'y':
      outBuffer[2] = 0x1C;
      break;
    case 'z':
      outBuffer[2] = 0x1D;
      break;
    case 'A':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x04;
      break;
    case 'B':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x05;
      break;
    case 'C':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x06;
      break;
    case 'D':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x07;
      break;
    case 'E':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x08;
      break;
    case 'F':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x09;
      break;
    case 'G':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x0A;
      break;
    case 'H':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x0B;
      break;
    case 'I':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x0C;
      break;
    case 'J':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x0D;
      break;
    case 'K':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x0E;
      break;
    case 'L':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x0F;
      break;
    case 'M':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x10;
      break;
    case 'N':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x11;
      break;
    case 'O':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x12;
      break;
    case 'P':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x13;
      break;
    case 'Q':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x14;
      break;
    case 'R':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x15;
      break;
    case 'S':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x16;
      break;
    case 'T':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x17;
      break;
    case 'U':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x18;
      break;
    case 'V':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x19;
      break;
    case 'W':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x1A;
      break;
    case 'X':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x1B;
      break;
    case 'Y':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x1C;
      break;
    case 'Z':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x1D;
      break;
    case '1':
      outBuffer[2] = 0x1E;
      break;
    case '!':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x1E;
      break;
    case '2':
      outBuffer[2] = 0x1F;
      break;
    case '@':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x1F;
      break;
    case '3':
      outBuffer[2] = 0x20;
      break;
    case '#':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x20;
      break;
    case '4':
      outBuffer[2] = 0x21;
      break;
    case '$':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x21;
      break;
    case '5':
      outBuffer[2] = 0x22;
      break;
    case '%':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x22;
      break;
    case '6':
      outBuffer[2] = 0x23;
      break;
    case '^':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x23;
      break;
    case '7':
      outBuffer[2] = 0x24;
      break;
    case '&':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x24;
      break;
    case '8':
      outBuffer[2] = 0x25;
      break;
    case '*':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x25;
      break;
    case '9':
      outBuffer[2] = 0x26;
      break;
    case '(':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x26;
      break;
    case '0':
      outBuffer[2] = 0x27;
      break;
    case ')':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x27;
      break;
    case '\t':
      outBuffer[2] = 0x2B;
      break;
    case ' ':
      outBuffer[2] = 0x2C;
      break;
    case '-':
      outBuffer[2] = 0x2D;
      break;
    case '_':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x2D;
      break;
    case '=':
      outBuffer[2] = 0x2E;
      break;
     case '+':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x2E;
      break;
    case '[':
      outBuffer[2] = 0x2F;
      break;
    case '{':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x2F;
      break;
    case ']':
      outBuffer[2] = 0x30;
      break;
    case '}':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x30;
      break;
    case '\\':
      outBuffer[2] = 0x31;
      break;
    case '|':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x31;
      break;
    case ';':
      outBuffer[2] = 0x33;
      break;
    case ':':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x33;
      break;
    case '\'':
      outBuffer[2] = 0x34;
      break;
    case '\"':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x34;
      break;
    case '`':
      outBuffer[2] = 0x35;
      break;
    case '~':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x35;
      break;
    case ',':
      outBuffer[2] = 0x36;
      break;
    case '<':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x36;
      break;
    case '.':
      outBuffer[2] = 0x37;
      break;
    case '>':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x37;
      break;
    case '/':
      outBuffer[2] = 0x38;
      break;
    case '?':
      outBuffer[0] = 0x02;
      outBuffer[2] = 0x38;
      break;
    default:
      outBuffer[0] = 0x00;
      outBuffer[2] = 0x00;
      break;
 /*
TBD:
Caps Lock 0x39
ESCAPE 0x29
DELETE (Backspace) 0x2A
F1 0x3A
F2 0x3B
F3 0x3C
F4 0x3D
F5 0x3E
F6 0x3F
F7 0x40
F8 0x41
F9 0x42
F10 0x43
F11 0x44
F12 0x45
RightArrow 0x4F
LeftArrow 0x50
DownArrow 0x51
UpArrow 0x52
Locking Caps Lock 0x82
LeftControl 0xE0
LeftShift 0xE1
LeftAlt 0xE2
Left GUI (apple) 0xE3
*/
      Serial1.println("Output Buffer:");
      Serial1.println(outBuffer[0]);
      Serial1.println(outBuffer[2]);
      Serial1.println("------------------");


  }
}




void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(57600);
  while (!Serial);
  Serial.println("Goodnight moon!");

  // set the data rate for the SoftwareSerial port
  Serial1.begin(57600);
  Serial1.println("Hello, world?");

  Serial.flush();
  Serial1.flush();
}

void loop() { // run over and over
  if(n == 1000000){
    Serial1.print("1"); 
    Serial.print("0"); 
    n = 0;
  }
  n++;
  if(Serial1.available() ) {
    Serial.print("A");
    Serial1.print("B");
    kbdBfr[0] = 0;
    translateInput(Serial1.read(), kbdBfr); //set buffer to inputed character
    Serial.write(kbdBfr, 8); //write input char
    kbdBfr[2] = 0; //relase key
    Serial.write(kbdBfr, 8); //write release key
    enterFlag = 1;
    Serial1.print(kbdBfr[2]);
  }
  if(enterFlag) {
    kbdBfr[2] = 0x28; //enter
    Serial.write(kbdBfr, 8);//write enter
    kbdBfr[2] = 0; //release
    Serial.write(kbdBfr, 8); //write release
    enterFlag = 0;
    Serial1.print("\n");
  }
}
